{"version":3,"sources":["components/InfoBox/InfoBox.js","components/LineChart/LineChart.js","components/ToolTip/ToolTip.js","App.js","index.js"],"names":["InfoBox","data","id","className","Number","length","y","toLocaleString","style","currency","moment","fromNow","toFixed","LineChart","props","state","hoverLoc","activePoint","this","min","x","max","reduce","p","svgWidth","yLabelSize","getX","svgHeight","xLabelSize","gY","getY","color","pathD","getSvgX","getSvgY","map","point","i","join","d","stroke","x1","y1","x2","y2","strokeDasharray","transform","textAnchor","e","svgLocation","document","getElementsByClassName","getBoundingClientRect","adjustment","width","relativeLoc","clientX","left","svgData","push","svgX","svgY","closestPoint","c","Math","abs","stopHover","setState","onChartHover","pointRadius","r","cx","cy","height","viewBox","onMouseLeave","onMouseMove","getCoords","makeAxis","makePath","makeArea","makeLabels","createLine","makeActivePoint","Component","defaultProps","ToolTip","placementStyles","App","useState","fetchingData","setFetchingData","setData","setHoverLoc","setActivePoint","useEffect","a","fetch","response","json","getData","then","stockData","sortedData","count","date","unshift","format","setPoints","b","handleChartHover","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d7d82f76.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport './InfoBox.css';\r\n\r\nconst InfoBox = ({ data }) => {\r\n  return (\r\n    <div id='data-container'>\r\n      <div id='left' className='box'>\r\n        <div className='heading'>\r\n          {Number(data[data.length - 1]?.y).toLocaleString('us-EN', {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          })}\r\n        </div>\r\n        <div className='subtext'>\r\n          {'Updated ' + moment(new moment()).fromNow()}\r\n        </div>\r\n      </div>\r\n      <div id='middle' className='box'>\r\n        <div className='heading'>\r\n          {Number(data[data.length - 1]?.y - data[0]?.y).toLocaleString(\r\n            'us-EN',\r\n            {\r\n              style: 'currency',\r\n              currency: 'USD'\r\n            }\r\n          )}\r\n        </div>\r\n        <div className='subtext'>Change Since Last Month (USD)</div>\r\n      </div>\r\n      <div id='right' className='box'>\r\n        <div className='heading'>\r\n          {(\r\n            ((data[data.length - 1]?.y - data[0]?.y) / data[0]?.y) *\r\n            100\r\n          ).toFixed(2) + '%'}\r\n        </div>\r\n        <div className='subtext'>Change Since Last Month (%)</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoBox;\r\n","import React, { Component } from 'react';\nimport './LineChart.css';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoverLoc: null,\n      activePoint: null\n    };\n  }\n  // GET X & Y || MAX & MIN\n  getX() {\n    const { data } = this.props;\n    return {\n      min: data[0].x,\n      max: data[data.length - 1].x\n    };\n  }\n  getY() {\n    const { data } = this.props;\n    return {\n      min: data.reduce((min, p) => (p.y < min ? p.y : min), data[0].y),\n      max: data.reduce((max, p) => (p.y > max ? p.y : max), data[0].y)\n    };\n  }\n  // GET SVG COORDINATES\n  getSvgX(x) {\n    const { svgWidth, yLabelSize } = this.props;\n    return yLabelSize + (x / this.getX().max) * (svgWidth - yLabelSize);\n  }\n  getSvgY(y) {\n    const { svgHeight, xLabelSize } = this.props;\n    const gY = this.getY();\n    return (\n      ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) /\n      (gY.max - gY.min)\n    );\n  }\n  // BUILD SVG PATH\n  makePath() {\n    const { data, color } = this.props;\n    let pathD =\n      'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' ';\n\n    pathD += data\n      .map((point, i) => {\n        return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' ';\n      })\n      .join('');\n\n    return (\n      <path className='linechart_path' d={pathD} style={{ stroke: color }} />\n    );\n  }\n  // BUILD SHADED AREA\n  makeArea() {\n    const { data } = this.props;\n    let pathD =\n      'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' ';\n\n    pathD += data\n      .map((point, i) => {\n        return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' ';\n      })\n      .join('');\n\n    const x = this.getX();\n    const y = this.getY();\n    pathD +=\n      'L ' +\n      this.getSvgX(x.max) +\n      ' ' +\n      this.getSvgY(y.min) +\n      ' ' +\n      'L ' +\n      this.getSvgX(x.min) +\n      ' ' +\n      this.getSvgY(y.min) +\n      ' ';\n\n    return <path className='linechart_area' d={pathD} />;\n  }\n  // BUILD GRID AXIS\n  makeAxis() {\n    const { yLabelSize } = this.props;\n    const x = this.getX();\n    const y = this.getY();\n\n    return (\n      <g className='linechart_axis'>\n        <line\n          x1={this.getSvgX(x.min) - yLabelSize}\n          y1={this.getSvgY(y.min)}\n          x2={this.getSvgX(x.max)}\n          y2={this.getSvgY(y.min)}\n          strokeDasharray='5'\n        />\n        <line\n          x1={this.getSvgX(x.min) - yLabelSize}\n          y1={this.getSvgY(y.max)}\n          x2={this.getSvgX(x.max)}\n          y2={this.getSvgY(y.max)}\n          strokeDasharray='5'\n        />\n      </g>\n    );\n  }\n  makeLabels() {\n    const { svgHeight, svgWidth, xLabelSize, yLabelSize } = this.props;\n    const padding = 5;\n    return (\n      <g className='linechart_label'>\n        {/* Y AXIS LABELS */}\n        <text\n          transform={`translate(${yLabelSize / 2}, 20)`}\n          textAnchor='middle'\n        >\n          {this.getY().max.toLocaleString('us-EN', {\n            style: 'currency',\n            currency: 'USD'\n          })}\n        </text>\n        <text\n          transform={`translate(${yLabelSize / 2}, ${svgHeight -\n            xLabelSize -\n            padding})`}\n          textAnchor='middle'\n        >\n          {this.getY().min.toLocaleString('us-EN', {\n            style: 'currency',\n            currency: 'USD'\n          })}\n        </text>\n        {/* X AXIS LABELS */}\n        <text\n          transform={`translate(${yLabelSize}, ${svgHeight})`}\n          textAnchor='start'\n        >\n          {this.props.data[0].d}\n        </text>\n        <text\n          transform={`translate(${svgWidth}, ${svgHeight})`}\n          textAnchor='end'\n        >\n          {this.props.data[this.props.data.length - 1].d}\n        </text>\n      </g>\n    );\n  }\n  // FIND CLOSEST POINT TO MOUSE\n  getCoords(e) {\n    const { svgWidth, data, yLabelSize } = this.props;\n    const svgLocation = document\n      .getElementsByClassName('linechart')[0]\n      .getBoundingClientRect();\n    const adjustment = (svgLocation.width - svgWidth) / 2; //takes padding into consideration\n    const relativeLoc = e.clientX - svgLocation.left - adjustment;\n\n    let svgData = [];\n    data.map((point, i) => {\n      svgData.push({\n        svgX: this.getSvgX(point.x),\n        svgY: this.getSvgY(point.y),\n        d: point.d,\n        p: point.p\n      });\n    });\n\n    let closestPoint = {};\n    for (let i = 0, c = 500; i < svgData.length; i++) {\n      if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\n        closestPoint = svgData[i];\n      }\n    }\n\n    if (relativeLoc - yLabelSize < 0) {\n      this.stopHover();\n    } else {\n      this.setState({\n        hoverLoc: relativeLoc,\n        activePoint: closestPoint\n      });\n      this.props.onChartHover(relativeLoc, closestPoint);\n    }\n  }\n  // STOP HOVER\n  stopHover() {\n    this.setState({ hoverLoc: null, activePoint: null });\n    this.props.onChartHover(null, null);\n  }\n  // MAKE ACTIVE POINT\n  makeActivePoint() {\n    const { color, pointRadius } = this.props;\n    return (\n      <circle\n        className='linechart_point'\n        style={{ stroke: color }}\n        r={pointRadius}\n        cx={this.state.activePoint.svgX}\n        cy={this.state.activePoint.svgY}\n      />\n    );\n  }\n  // MAKE HOVER LINE\n  createLine() {\n    const { svgHeight, xLabelSize } = this.props;\n    return (\n      <line\n        className='hoverLine'\n        x1={this.state.hoverLoc}\n        y1={-8}\n        x2={this.state.hoverLoc}\n        y2={svgHeight - xLabelSize}\n      />\n    );\n  }\n\n  render() {\n    const { svgHeight, svgWidth } = this.props;\n\n    return (\n      <svg\n        width={svgWidth}\n        height={svgHeight}\n        viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n        className={'linechart'}\n        onMouseLeave={() => this.stopHover()}\n        onMouseMove={e => this.getCoords(e)}\n      >\n        <g>\n          {this.makeAxis()}\n          {this.makePath()}\n          {this.makeArea()}\n          {this.makeLabels()}\n          {this.state.hoverLoc ? this.createLine() : null}\n          {this.state.hoverLoc ? this.makeActivePoint() : null}\n        </g>\n      </svg>\n    );\n  }\n}\n// DEFAULT PROPS\nLineChart.defaultProps = {\n  data: [],\n  color: '#2196F3',\n  pointRadius: 5,\n  svgHeight: 300,\n  svgWidth: 900,\n  xLabelSize: 20,\n  yLabelSize: 80\n};\n\nexport default LineChart;\n","import React from 'react';\nimport './ToolTip.css';\n\nconst ToolTip = props => {\n  const { hoverLoc, activePoint } = props;\n  const svgLocation = document\n    .getElementsByClassName('linechart')[0]\n    .getBoundingClientRect();\n\n  let placementStyles = {};\n  let width = 100;\n  placementStyles.width = width + 'px';\n  placementStyles.left = hoverLoc + svgLocation.left - width / 2;\n\n  return (\n    <div className='hover' style={placementStyles}>\n      <div className='date'>{activePoint.d}</div>\n      <div className='price'>\n        {Number(activePoint.p).toLocaleString('us-EN', {\n          style: 'currency',\n          currency: 'USD'\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport './App.css';\nimport './components/InfoBox/InfoBox';\nimport InfoBox from './components/InfoBox/InfoBox';\nimport LineChart from './components/LineChart/LineChart';\nimport ToolTip from './components/ToolTip/ToolTip';\n\nfunction App() {\n  const [fetchingData, setFetchingData] = useState(true);\n  const [data, setData] = useState(null);\n  const [hoverLoc, setHoverLoc] = useState(null);\n  const [activePoint, setActivePoint] = useState(null);\n  const handleChartHover = (hoverLoc, activePoint) => {\n    setHoverLoc(hoverLoc);\n    setActivePoint(activePoint);\n  };\n\n  const setPoints = stockData => {\n    const sortedData = [];\n    let count = 29;\n    for (let date in stockData['Time Series (Daily)']) {\n      sortedData.unshift({\n        d: moment(date).format('MMM DD'),\n        p: stockData['Time Series (Daily)'][date][\n          '4. close'\n        ].toLocaleString('us-EN', { style: 'currency', currency: 'USD' }),\n        x: count, //previous days\n        y: Number(stockData['Time Series (Daily)'][date]['4. close']).toFixed(2) // numerical price\n      });\n      count -= 1;\n      if (count < 0) {\n        break;\n      }\n    }\n    setData(sortedData);\n    setFetchingData(false);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const url =\n        'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=TSLA&apikey=[YOUR_KEY_HERE]';\n      let response = await fetch(url);\n      let data = await response.json();\n      return data;\n    };\n    getData().then(function(data) {\n      setPoints(data);\n    });\n  }, []);\n  return (\n    <div className='container'>\n      <div className='row'>\n        <h1>30 (Trading) Day TSLA Price Chart</h1>\n      </div>\n      <div className='row'>\n        {!fetchingData ? <InfoBox data={data} /> : null}\n      </div>\n      <div className='row'>\n        <div className='popup'>\n          {hoverLoc ? (\n            <ToolTip hoverLoc={hoverLoc} activePoint={activePoint} />\n          ) : null}\n        </div>\n      </div>\n      <div className='row'>\n        <div className='chart'>\n          {!fetchingData ? (\n            <LineChart\n              data={data}\n              onChartHover={(a, b) => handleChartHover(a, b)}\n            />\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}